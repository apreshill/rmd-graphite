---
title: "Code Chunks"
weight: 8
description: | 
  Use parameters to re-render the same output with different versions of your data, or depending on different values present in your data.
---


more of a summary: here are the chunk options we've shown so far for:

+ how your code WORKS (eval, error for individual chunks)
+ Style how code prints w/ knitr chunk options (include (+ output), echo)
+ Style your output w/ knitr chunk options (collapse, comment, message, warning, results)
+ Style your figures w/ knitr chunk options (out.width, fig.show, fig.align, fig.asp, fig.cap, fig.alt)

also covered:
+ Organize your code with knitr chunk labels (kebabs, not snakes)
+ setup chunk for setting global options (+ fig.path!)

knit_exit()
include_graphics()
ref.label()!

## Run chunks selectively

Running chunks selectively and systematically is a great way to develop code, and also a good strategy for troubleshooting.

run all chunks above/all below/just all 

---

## Control chunks

Chunk output can be customized with [knitr options](http://yihui.name/knitr/options/), arguments set in the `{}` of a chunk header. Above, we use five arguments:

* `include = FALSE` prevents code and results from appearing in the finished file. R Markdown still runs the code in the chunk, and the results can be used by other chunks.
* `echo = FALSE` prevents code, but not the results from appearing in the finished file. This is a useful way to embed figures.
* `message = FALSE` prevents messages that are generated by code from appearing in the finished file.
* `warning = FALSE` prevents warnings that are generated by code from appearing in the finished.

See the [R Markdown Reference Guide](https://www.rstudio.com/wp-content/uploads/2015/03/rmarkdown-reference.pdf) for a complete list of knitr chunk options.

## Global options

To set global options that apply to every chunk in your file, call `knitr::opts_chunk$set` in a code chunk. Knitr will treat each option that you pass to `knitr::opts_chunk$set` as a global default that can be overwritten in individual chunk headers.

## Caching

If document rendering becomes time consuming due to long computations you can use knitr caching to improve performance. [*Knitr chunk and package options*](http://yihui.name/knitr/options) describes how caching works and the [*Cache examples*](http://yihui.name/knitr/demo/cache/) provide additional details.

